// Code generated by gen; DO NOT EDIT.
package model

import (
	"github.com/jackc/pgx/v5"

	"graphql-project/interface/model"
)

func (order *Order) Table() string {
	return "orders"
}

func (order *Order) Field(property string) string {
	switch property {
	case "id":
		return "id"
	case "createdAt":
		return "createdAt"
	case "user":
		return "userId"
	case "product":
		return "productId"
	case "discount":
		return "discount"
	case "quantity":
		return "quantity"
	case "subtotal":
		return "subtotal"
	case "tax":
		return "tax"
	case "total":
		return "total"
	case "deletedAt":
		return "deletedAt"
	default:
		return ""
	}
}

func (order *Order) Fields() string {
	return `"id", "createdAt", "userId", "productId", "discount", "quantity", "subtotal", "tax", "total", "deletedAt"`
}

func (order *Order) Identity() string {
	return "id"
}

func (order *Order) ScanRow(rows pgx.Rows) error {
	values := rows.RawValues()
	for i, fieldDesc := range rows.FieldDescriptions() {
		v := value(values[i])
		switch fieldDesc.Name {
		case "id":
			order.ID = v.Int64()
		case "createdAt":
			order.CreatedAt = v.Time()
		case "userId":
			order.UserId = v.Int64()
		case "productId":
			order.ProductId = v.Int64()
		case "discount":
			order.Discount = v.Float64()
		case "quantity":
			order.Quantity = v.Int32()
		case "subtotal":
			order.Subtotal = v.Float64()
		case "tax":
			order.Tax = v.Float64()
		case "total":
			order.Total = v.Float64()
		case "deletedAt":
			if v != nil {
				n := v.Time()
				order.DeletedAt = &n
			} else {
				order.DeletedAt = nil
			}
		}
	}
	return nil
}

type Orders []Order
type OrderRefs []*Order

func (Orders *Orders) New() model.Entity {
	return &Order{}
}

func (Orders *Orders) Add(entity model.Entity) {
	order := entity.(*Order)
	*Orders = append(*Orders, *order)
}

func (Orders *OrderRefs) New() model.Entity {
	return &Order{}
}

func (Orders *OrderRefs) Add(entity model.Entity) {
	order := *entity.(*Order)
	*Orders = append(*Orders, &order)
}

func (order *Order) getUserId() any {
	return (order.UserId)
}

func (order *Order) getProductId() any {
	return (order.ProductId)
}

func (order *Order) getDiscount() any {
	return (order.Discount)
}

func (order *Order) getQuantity() any {
	return (order.Quantity)
}

func (order *Order) getSubtotal() any {
	return (order.Subtotal)
}

func (order *Order) getTax() any {
	return (order.Tax)
}

func (order *Order) getTotal() any {
	return (order.Total)
}

func (order *Order) InsertFields() (string, string, []any) {
	values := []any{
		order.getUserId(),
		order.getProductId(),
		order.getDiscount(),
		order.getQuantity(),
		order.getSubtotal(),
		order.getTax(),
		order.getTotal(),
	}
	return `"userId", "productId", "discount", "quantity", "subtotal", "tax", "total"`, `$1, $2, $3, $4, $5, $6, $7`, values
}

type OrderInput struct {
	UserId    NullBigInt
	ProductId NullBigInt
	Discount  NullDouble
	Quantity  NullInt
	Subtotal  NullDouble
	Tax       NullDouble
	Total     NullDouble
}

func (order *OrderInput) InsertFields() (string, string, []any) {
	f := fields{make([]byte, 0, 128), make([]byte, 0, 64), make([]any, 0, 7)}
	f.addField("userId", order.UserId)
	f.addField("productId", order.ProductId)
	f.addField("discount", order.Discount)
	f.addField("quantity", order.Quantity)
	f.addField("subtotal", order.Subtotal)
	f.addField("tax", order.Tax)
	f.addField("total", order.Total)
	return f.get()
}
