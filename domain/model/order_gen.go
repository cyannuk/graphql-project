// Code generated by gen; DO NOT EDIT.
package model

import (
	"graphql-project/interface/model"
)

func (order *Order) Table() string {
	return "orders"
}

func (order *Order) Field(property string) (string, any) {
	switch property {
	case "id":
		return "id", &order.ID
	case "createdAt":
		return "createdAt", &order.CreatedAt
	case "user":
		return "userId", &order.UserId
	case "product":
		return "productId", &order.ProductId
	case "discount":
		return "discount", &order.Discount
	case "quantity":
		return "quantity", &order.Quantity
	case "subtotal":
		return "subtotal", &order.Subtotal
	case "tax":
		return "tax", &order.Tax
	case "total":
		return "total", &order.Total
	case "deletedAt":
		return "deletedAt", &order.DeletedAt
	default:
		return "", nil
	}
}

func (order *Order) Fields() (string, []any) {
	return `"id", "createdAt", "userId", "productId", "discount", "quantity", "subtotal", "tax", "total", "deletedAt"`, []any{&order.ID, &order.CreatedAt, &order.UserId, &order.ProductId, &order.Discount, &order.Quantity, &order.Subtotal, &order.Tax, &order.Total, &order.DeletedAt}
}

func (order *Order) Identity() (string, any) {
	return "id", &order.ID
}

type orders []Order
type porders []*Order

func (orders *orders) New() model.Entity {
	return &Order{}
}

func (orders *orders) Add(entity model.Entity) {
	order := entity.(*Order)
	*orders = append(*orders, *order)
}

func (orders *porders) New() model.Entity {
	return &Order{}
}

func (orders *porders) Add(entity model.Entity) {
	order := *entity.(*Order)
	*orders = append(*orders, &order)
}

func NewOrders(capacity int) orders {
	return make([]Order, 0, capacity)
}

func NewPtrOrders(capacity int) porders {
	return make([]*Order, 0, capacity)
}
