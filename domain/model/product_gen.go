// Code generated by gen; DO NOT EDIT.
package model

import (
	"github.com/jackc/pgx/v5"

	"graphql-project/interface/model"
)

func (product *Product) Table() string {
	return "products"
}

func (product *Product) Field(property string) string {
	switch property {
	case "id":
		return "id"
	case "createdAt":
		return "createdAt"
	case "category":
		return "category"
	case "ean":
		return "ean"
	case "price":
		return "price"
	case "quantity":
		return "quantity"
	case "rating":
		return "rating"
	case "name":
		return "name"
	case "vendor":
		return "vendor"
	case "deletedAt":
		return "deletedAt"
	default:
		return ""
	}
}

func (product *Product) Fields() string {
	return `"id", "createdAt", "category", "ean", "price", "quantity", "rating", "name", "vendor", "deletedAt"`
}

func (product *Product) Identity() string {
	return "id"
}

func (product *Product) ScanRow(rows pgx.Rows) error {
	values := rows.RawValues()
	for i, fieldDesc := range rows.FieldDescriptions() {
		v := value(values[i])
		switch fieldDesc.Name {
		case "id":
			product.ID = v.Int64()
		case "createdAt":
			product.CreatedAt = v.Time()
		case "category":
			product.Category = v.String()
		case "ean":
			product.Ean = v.String()
		case "price":
			product.Price = v.Float64()
		case "quantity":
			product.Quantity = v.Int32()
		case "rating":
			product.Rating = v.Float64()
		case "name":
			product.Name = v.String()
		case "vendor":
			product.Vendor = v.String()
		case "deletedAt":
			if v != nil {
				n := v.Time()
				product.DeletedAt = &n
			} else {
				product.DeletedAt = nil
			}
		}
	}
	return nil
}

type Products []Product
type ProductRefs []*Product

func (Products *Products) New() model.Entity {
	return &Product{}
}

func (Products *Products) Add(entity model.Entity) {
	product := entity.(*Product)
	*Products = append(*Products, *product)
}

func (Products *ProductRefs) New() model.Entity {
	return &Product{}
}

func (Products *ProductRefs) Add(entity model.Entity) {
	product := *entity.(*Product)
	*Products = append(*Products, &product)
}

func (product *Product) getCategory() any {
	return (product.Category)
}

func (product *Product) getEan() any {
	return (product.Ean)
}

func (product *Product) getPrice() any {
	return (product.Price)
}

func (product *Product) getQuantity() any {
	return (product.Quantity)
}

func (product *Product) getRating() any {
	return (product.Rating)
}

func (product *Product) getName() any {
	return (product.Name)
}

func (product *Product) getVendor() any {
	return (product.Vendor)
}

func (product *Product) InsertFields() (string, string, []any) {
	values := []any{
		product.getCategory(),
		product.getEan(),
		product.getPrice(),
		product.getQuantity(),
		product.getRating(),
		product.getName(),
		product.getVendor(),
	}
	return `"category", "ean", "price", "quantity", "rating", "name", "vendor"`, `$1, $2, $3, $4, $5, $6, $7`, values
}

type ProductInput struct {
	Category NullString
	Ean      NullString
	Price    NullDouble
	Quantity NullInt
	Rating   NullDouble
	Name     NullString
	Vendor   NullString
}

func (product *ProductInput) InsertFields() (string, string, []any) {
	f := fields{make([]byte, 0, 128), make([]byte, 0, 64), make([]any, 0, 7)}
	f.addField("category", product.Category)
	f.addField("ean", product.Ean)
	f.addField("price", product.Price)
	f.addField("quantity", product.Quantity)
	f.addField("rating", product.Rating)
	f.addField("name", product.Name)
	f.addField("vendor", product.Vendor)
	return f.get()
}
