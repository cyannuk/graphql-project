// Code generated by gen; DO NOT EDIT.
package model

import (
	"graphql-project/interface/model"
)

func (product *Product) Table() string {
	return "products"
}

func (product *Product) Field(property string) (string, any) {
	switch property {
	case "id":
		return "id", &product.ID
	case "createdAt":
		return "createdAt", &product.CreatedAt
	case "category":
		return "category", &product.Category
	case "ean":
		return "ean", &product.Ean
	case "price":
		return "price", &product.Price
	case "quantity":
		return "quantity", &product.Quantity
	case "rating":
		return "rating", &product.Rating
	case "name":
		return "name", &product.Name
	case "vendor":
		return "vendor", &product.Vendor
	case "deletedAt":
		return "deletedAt", &product.DeletedAt
	default:
		return "", nil
	}
}

func (product *Product) Fields() (string, []any) {
	return `"id", "createdAt", "category", "ean", "price", "quantity", "rating", "name", "vendor", "deletedAt"`, []any{&product.ID, &product.CreatedAt, &product.Category, &product.Ean, &product.Price, &product.Quantity, &product.Rating, &product.Name, &product.Vendor, &product.DeletedAt}
}

func (product *Product) Identity() (string, any) {
	return "id", &product.ID
}

type products []Product
type pproducts []*Product

func (products *products) New() model.Entity {
	return &Product{}
}

func (products *products) Add(entity model.Entity) {
	product := entity.(*Product)
	*products = append(*products, *product)
}

func (products *pproducts) New() model.Entity {
	return &Product{}
}

func (products *pproducts) Add(entity model.Entity) {
	product := *entity.(*Product)
	*products = append(*products, &product)
}

func NewProducts(capacity int) products {
	return make([]Product, 0, capacity)
}

func NewPtrProducts(capacity int) pproducts {
	return make([]*Product, 0, capacity)
}

func (product *Product) InsertFields() (string, string, []any) {
	return `"category", "ean", "price", "quantity", "rating", "name", "vendor"`, `$1, $2, $3, $4, $5, $6, $7`, []any{product.Category, product.Ean, product.Price, product.Quantity, product.Rating, product.Name, product.Vendor}
}

type ProductInput struct {
	Category NullString
	Ean      NullString
	Price    NullDouble
	Quantity NullInt
	Rating   NullDouble
	Name     NullString
	Vendor   NullString
}

func (product *ProductInput) InsertFields() (string, string, []any) {
	f := fields{make([]byte, 0, 128), make([]byte, 0, 64), make([]any, 0, 7)}
	switch product.Category.State {
	case Exists:
		f.addField("category", product.Category.Value)
	case Null:
		f.addField("category", nil)
	}
	switch product.Ean.State {
	case Exists:
		f.addField("ean", product.Ean.Value)
	case Null:
		f.addField("ean", nil)
	}
	switch product.Price.State {
	case Exists:
		f.addField("price", product.Price.Value)
	case Null:
		f.addField("price", nil)
	}
	switch product.Quantity.State {
	case Exists:
		f.addField("quantity", product.Quantity.Value)
	case Null:
		f.addField("quantity", nil)
	}
	switch product.Rating.State {
	case Exists:
		f.addField("rating", product.Rating.Value)
	case Null:
		f.addField("rating", nil)
	}
	switch product.Name.State {
	case Exists:
		f.addField("name", product.Name.Value)
	case Null:
		f.addField("name", nil)
	}
	switch product.Vendor.State {
	case Exists:
		f.addField("vendor", product.Vendor.Value)
	case Null:
		f.addField("vendor", nil)
	}
	return f.get()
}
