// Code generated by gen; DO NOT EDIT.
package model

import (
	"graphql-project/interface/model"
)

{{range $type, $fields := .}}

{{$objectID := $type | toLowerCamel}}
func ({{$objectID}} *{{$type}}) Table() string {
	return "{{$type | toSnake | plural}}"
}

func ({{$objectID}} *{{$type}}) Field(property string) (string, any) {
	switch property {
{{range $fields -}}
	case "{{.Property}}":
		return "{{.Column}}", &{{$objectID}}.{{.Name}}
{{end -}}
	default:
		return "", nil
	}
}

func ({{$objectID}} *{{$type}}) Fields() (string, []any) {
	return {{$fields | columns}}, []any{ {{$fields | pointers $objectID}} }
}

{{$identity := $fields | identity}}
func ({{$objectID}} *{{$type}}) Identity() (string, any) {
	return "{{$identity.Column}}", &{{$objectID}}.{{$identity.Name}}
}

{{$Types := $type | plural}}
{{$sliceType := $Types | toLowerCamel}}
{{$slicePtrType := join "p" $sliceType}}

type {{$sliceType}} []{{$type}}
type {{$slicePtrType}} []*{{$type}}

{{$slice := $sliceType}}
func ({{$slice}} *{{$sliceType}}) New() model.Entity {
	return &{{$type}}{}
}

{{$varName := $type | toLowerCamel}}
func ({{$slice}} *{{$sliceType}}) Add(entity model.Entity) {
	{{$varName}} := entity.(*{{$type}})
	*{{$slice}} = append(*{{$slice}}, *{{$varName}})
}

func ({{$slice}} *{{$slicePtrType}}) New() model.Entity {
	return &{{$type}}{}
}

func ({{$slice}} *{{$slicePtrType}}) Add(entity model.Entity) {
	{{$varName}} := *entity.(*{{$type}})
	*{{$slice}} = append(*{{$slice}}, &{{$varName}})
}

func New{{$Types}}(capacity int) {{$sliceType}} {
	return make([]{{$type}}, 0, capacity)
}

func NewPtr{{$Types}}(capacity int) {{$slicePtrType}} {
	return make([]*{{$type}}, 0, capacity)
}

{{$inputs := $fields | inputs}}
func ({{$objectID}} *{{$type}}) InsertFields() (string, string, []any) {
	return {{$inputs | columns}}, {{$inputs | placeholders}}, []any{ {{$inputs | values $objectID}} }
}

{{$inputType := join $type "Input"}}
type {{$inputType}} struct {
{{range $inputs -}}
	{{.Name}} {{.NullableType}}
{{end -}}
}

func ({{$objectID}} *{{$inputType}}) InsertFields() (string, string, []any) {
	f := fields{make([]byte, 0, 128), make([]byte, 0, 64), make([]any, 0, {{len $inputs}})}
{{range $inputs -}}
	switch {{$objectID}}.{{.Name}}.State {
	case Exists:
		f.addField("{{.Column}}", {{$objectID}}.{{.Name}}.Value)
	case Null:
		f.addField("{{.Column}}", nil)
	}
{{end -}}
	return f.get()
}
{{end}}
