// Code generated by gen; DO NOT EDIT.
package model

import (
	"github.com/jackc/pgx/v5"

	"graphql-project/interface/model"
)

{{range $type, $fields := .}}

{{$objectID := $type | toLowerCamel}}
func ({{$objectID}} *{{$type}}) Table() string {
	return "{{$type | toSnake | plural}}"
}

func ({{$objectID}} *{{$type}}) Field(property string) string {
	switch property {
{{range $fields -}}
	case "{{.Property}}":
		return "{{.Column}}"
{{end -}}
	default:
		return ""
	}
}

func ({{$objectID}} *{{$type}}) Fields() string {
	return {{$fields | columns}}
}

{{$identity := $fields | identity}}
func ({{$objectID}} *{{$type}}) Identity() string {
	return "{{$identity.Column}}"
}

func ({{$objectID}} *{{$type}}) ScanRow(rows pgx.Rows) error {
	values := rows.RawValues()
	for i, fieldDesc := range rows.FieldDescriptions() {
		v := value(values[i])
		switch fieldDesc.Name {
{{range $fields -}}
		case "{{.Column}}":
		{{if .IsPtrType -}}
			if v != nil {
			    n := v.{{.GoType | capitalize}}()
				{{$objectID}}.{{.Name}} = &n
			} else {
				{{$objectID}}.{{.Name}} = nil
			}
		{{else -}}
			{{$objectID}}.{{.Name}} = v.{{.GoType | capitalize}}()
		{{end -}}
{{end -}}
		}
	}
	return nil
}

{{$sliceType := $type | plural}}
{{$slicePtrType := join $type "Refs"}}

type {{$sliceType}} []{{$type}}
type {{$slicePtrType}} []*{{$type}}

{{$slice := $sliceType}}
func ({{$slice}} *{{$sliceType}}) New() model.Entity {
	return &{{$type}}{}
}

{{$varName := $type | toLowerCamel}}
func ({{$slice}} *{{$sliceType}}) Add(entity model.Entity) {
	{{$varName}} := entity.(*{{$type}})
	*{{$slice}} = append(*{{$slice}}, *{{$varName}})
}

func ({{$slice}} *{{$slicePtrType}}) New() model.Entity {
	return &{{$type}}{}
}

func ({{$slice}} *{{$slicePtrType}}) Add(entity model.Entity) {
	{{$varName}} := *entity.(*{{$type}})
	*{{$slice}} = append(*{{$slice}}, &{{$varName}})
}

{{$inputs := $fields | inputs}}

{{range $inputs}}
func ({{$objectID}} *{{$type}}) get{{.Name}}() any {
	{{if .IsPtrType -}}
		value := {{$objectID}}.{{.Name}}
		if value == nil {
			return nil
		}
		return {{.DbType}}(*value)
	{{else -}}
		return {{.DbType}}({{$objectID}}.{{.Name}})
	{{end -}}
}
{{end}}

func ({{$objectID}} *{{$type}}) InsertFields() (string, string, []any) {
	values := []any{
{{range $inputs -}}
	{{$objectID}}.get{{.Name}}(),
{{end -}}
	}
	return {{$inputs | columns}}, {{$inputs | placeholders}}, values
}

{{$inputType := join $type "Input"}}
type {{$inputType}} struct {
{{range $inputs -}}
	{{.Name}} {{.NullableType}}
{{end -}}
}

func ({{$objectID}} *{{$inputType}}) InsertFields() (string, string, []any) {
	f := fields{make([]byte, 0, 128), make([]byte, 0, 64), make([]any, 0, {{len $inputs}})}
{{range $inputs -}}
	f.addField("{{.Column}}", {{$objectID}}.{{.Name}})
{{end -}}
	return f.get()
}
{{end}}
