// Code generated by gen; DO NOT EDIT.
package input

import (
	"graphql-project/domain/model"
)

func (user *User) Fields() (string, string, []any) {
	f := fields{make([]byte, 0, 128), make([]byte, 0, 64), make([]any, 0, 11)}
	switch user.Name.State {
	case model.Exists:
		f.addField("name", user.Name.Value)
	case model.Null:
		f.addField("name", nil)
	}
	switch user.Email.State {
	case model.Exists:
		f.addField("email", user.Email.Value)
	case model.Null:
		f.addField("email", nil)
	}
	switch user.Address.State {
	case model.Exists:
		f.addField("address", user.Address.Value)
	case model.Null:
		f.addField("address", nil)
	}
	switch user.City.State {
	case model.Exists:
		f.addField("city", user.City.Value)
	case model.Null:
		f.addField("city", nil)
	}
	switch user.State.State {
	case model.Exists:
		f.addField("state", user.State.Value)
	case model.Null:
		f.addField("state", nil)
	}
	switch user.Zip.State {
	case model.Exists:
		f.addField("zip", user.Zip.Value)
	case model.Null:
		f.addField("zip", nil)
	}
	switch user.BirthDate.State {
	case model.Exists:
		f.addField("birthDate", user.BirthDate.Value)
	case model.Null:
		f.addField("birthDate", nil)
	}
	switch user.Latitude.State {
	case model.Exists:
		f.addField("latitude", user.Latitude.Value)
	case model.Null:
		f.addField("latitude", nil)
	}
	switch user.Longitude.State {
	case model.Exists:
		f.addField("longitude", user.Longitude.Value)
	case model.Null:
		f.addField("longitude", nil)
	}
	switch user.Password.State {
	case model.Exists:
		f.addField("password", user.Password.Value)
	case model.Null:
		f.addField("password", nil)
	}
	switch user.Source.State {
	case model.Exists:
		f.addField("source", user.Source.Value)
	case model.Null:
		f.addField("source", nil)
	}
	return f.get()
}

func (newUser *NewUser) Fields() (string, string, []any) {
	return `"name", "email", "address", "city", "state", "zip", "birthDate", "latitude", "longitude", "password", "source"`, `$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11`, []any{newUser.Name, newUser.Email, newUser.Address, newUser.City, newUser.State, newUser.Zip, newUser.BirthDate, newUser.Latitude, newUser.Longitude, newUser.Password, newUser.Source}
}
