// Code generated by gen; DO NOT EDIT.
package model

import (
	"github.com/jackc/pgx/v5"

	"graphql-project/interface/model"
)

func (user *User) Table() string {
	return "users"
}

func (user *User) Field(property string) string {
	switch property {
	case "id":
		return "id"
	case "createdAt":
		return "createdAt"
	case "name":
		return "name"
	case "email":
		return "email"
	case "address":
		return "address"
	case "city":
		return "city"
	case "state":
		return "state"
	case "zip":
		return "zip"
	case "birthDate":
		return "birthDate"
	case "latitude":
		return "latitude"
	case "longitude":
		return "longitude"
	case "password":
		return "password"
	case "source":
		return "source"
	case "deletedAt":
		return "deletedAt"
	case "role":
		return "role"
	default:
		return ""
	}
}

func (user *User) Fields() string {
	return `"id", "createdAt", "name", "email", "address", "city", "state", "zip", "birthDate", "latitude", "longitude", "password", "source", "deletedAt", "role"`
}

func (user *User) Identity() string {
	return "id"
}

func (user *User) ScanRow(rows pgx.Rows) error {
	values := rows.RawValues()
	for i, fieldDesc := range rows.FieldDescriptions() {
		v := value(values[i])
		switch fieldDesc.Name {
		case "id":
			user.ID = v.Int64()
		case "createdAt":
			user.CreatedAt = v.Time()
		case "name":
			user.Name = v.String()
		case "email":
			user.Email = v.String()
		case "address":
			user.Address = v.String()
		case "city":
			user.City = v.String()
		case "state":
			user.State = v.String()
		case "zip":
			user.Zip = v.String()
		case "birthDate":
			user.BirthDate = v.Date()
		case "latitude":
			user.Latitude = v.Float64()
		case "longitude":
			user.Longitude = v.Float64()
		case "password":
			user.Password = v.String()
		case "source":
			user.Source = v.String()
		case "deletedAt":
			if v != nil {
				n := v.Time()
				user.DeletedAt = &n
			} else {
				user.DeletedAt = nil
			}
		case "role":
			user.Role = v.Role()
		}
	}
	return nil
}

type Users []User
type UserRefs []*User

func (Users *Users) New() model.Entity {
	return &User{}
}

func (Users *Users) Add(entity model.Entity) {
	user := entity.(*User)
	*Users = append(*Users, *user)
}

func (Users *UserRefs) New() model.Entity {
	return &User{}
}

func (Users *UserRefs) Add(entity model.Entity) {
	user := *entity.(*User)
	*Users = append(*Users, &user)
}

func (user *User) getName() any {
	return (user.Name)
}

func (user *User) getEmail() any {
	return (user.Email)
}

func (user *User) getAddress() any {
	return (user.Address)
}

func (user *User) getCity() any {
	return (user.City)
}

func (user *User) getState() any {
	return (user.State)
}

func (user *User) getZip() any {
	return (user.Zip)
}

func (user *User) getBirthDate() any {
	return (user.BirthDate)
}

func (user *User) getLatitude() any {
	return (user.Latitude)
}

func (user *User) getLongitude() any {
	return (user.Longitude)
}

func (user *User) getPassword() any {
	return (user.Password)
}

func (user *User) getSource() any {
	return (user.Source)
}

func (user *User) getRole() any {
	return int32(user.Role)
}

func (user *User) InsertFields() (string, string, []any) {
	values := []any{
		user.getName(),
		user.getEmail(),
		user.getAddress(),
		user.getCity(),
		user.getState(),
		user.getZip(),
		user.getBirthDate(),
		user.getLatitude(),
		user.getLongitude(),
		user.getPassword(),
		user.getSource(),
		user.getRole(),
	}
	return `"name", "email", "address", "city", "state", "zip", "birthDate", "latitude", "longitude", "password", "source", "role"`, `$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12`, values
}

type UserInput struct {
	Name      NullString
	Email     NullString
	Address   NullString
	City      NullString
	State     NullString
	Zip       NullString
	BirthDate NullDate
	Latitude  NullDouble
	Longitude NullDouble
	Password  NullString
	Source    NullString
	Role      NullInt
}

func (user *UserInput) InsertFields() (string, string, []any) {
	f := fields{make([]byte, 0, 128), make([]byte, 0, 64), make([]any, 0, 12)}
	f.addField("name", user.Name)
	f.addField("email", user.Email)
	f.addField("address", user.Address)
	f.addField("city", user.City)
	f.addField("state", user.State)
	f.addField("zip", user.Zip)
	f.addField("birthDate", user.BirthDate)
	f.addField("latitude", user.Latitude)
	f.addField("longitude", user.Longitude)
	f.addField("password", user.Password)
	f.addField("source", user.Source)
	f.addField("role", user.Role)
	return f.get()
}
