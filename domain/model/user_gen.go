// Code generated by gen; DO NOT EDIT.
package model

import (
	"graphql-project/interface/model"
)

func (user *User) Field(property string) (string, any) {
	switch property {
	case "id":
		return "id", &user.ID
	case "createdAt":
		return "createdAt", &user.CreatedAt
	case "name":
		return "name", &user.Name
	case "email":
		return "email", &user.Email
	case "address":
		return "address", &user.Address
	case "city":
		return "city", &user.City
	case "state":
		return "state", &user.State
	case "zip":
		return "zip", &user.Zip
	case "birthDate":
		return "birthDate", &user.BirthDate
	case "latitude":
		return "latitude", &user.Latitude
	case "longitude":
		return "longitude", &user.Longitude
	case "password":
		return "password", &user.Password
	case "source":
		return "source", &user.Source
	case "deletedAt":
		return "deletedAt", &user.DeletedAt
	default:
		return "", nil
	}
}

func (user *User) Identity() (string, any) {
	return "id", &user.ID
}

func (user *User) Fields() (string, []any) {
	return `"id", "createdAt", "name", "email", "address", "city", "state", "zip", "birthDate", "latitude", "longitude", "password", "source", "deletedAt"`, []any{&user.ID, &user.CreatedAt, &user.Name, &user.Email, &user.Address, &user.City, &user.State, &user.Zip, &user.BirthDate, &user.Latitude, &user.Longitude, &user.Password, &user.Source, &user.DeletedAt}
}

type users []User
type pusers []*User

func (users *users) New() model.Entity {
	return &User{}
}

func (users *users) Add(entity model.Entity) {
	user := entity.(*User)
	*users = append(*users, *user)
}

func (users *pusers) New() model.Entity {
	return &User{}
}

func (users *pusers) Add(entity model.Entity) {
	user := *entity.(*User)
	*users = append(*users, &user)
}

func NewUsers(capacity int) users {
	return make([]User, 0, capacity)
}

func NewPtrUsers(capacity int) pusers {
	return make([]*User, 0, capacity)
}
