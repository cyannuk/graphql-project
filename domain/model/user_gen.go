// Code generated by gen; DO NOT EDIT.
package model

import (
	"graphql-project/interface/model"
)

func (user *User) Table() string {
	return "users"
}

func (user *User) Field(property string) (string, any) {
	switch property {
	case "id":
		return "id", &user.ID
	case "createdAt":
		return "createdAt", &user.CreatedAt
	case "name":
		return "name", &user.Name
	case "email":
		return "email", &user.Email
	case "address":
		return "address", &user.Address
	case "city":
		return "city", &user.City
	case "state":
		return "state", &user.State
	case "zip":
		return "zip", &user.Zip
	case "birthDate":
		return "birthDate", &user.BirthDate
	case "latitude":
		return "latitude", &user.Latitude
	case "longitude":
		return "longitude", &user.Longitude
	case "password":
		return "password", &user.Password
	case "source":
		return "source", &user.Source
	case "deletedAt":
		return "deletedAt", &user.DeletedAt
	case "role":
		return "role", &user.Role
	default:
		return "", nil
	}
}

func (user *User) Fields() (string, []any) {
	return `"id", "createdAt", "name", "email", "address", "city", "state", "zip", "birthDate", "latitude", "longitude", "password", "source", "deletedAt", "role"`, []any{&user.ID, &user.CreatedAt, &user.Name, &user.Email, &user.Address, &user.City, &user.State, &user.Zip, &user.BirthDate, &user.Latitude, &user.Longitude, &user.Password, &user.Source, &user.DeletedAt, &user.Role}
}

func (user *User) Identity() (string, any) {
	return "id", &user.ID
}

type users []User
type pusers []*User

func (users *users) New() model.Entity {
	return &User{}
}

func (users *users) Add(entity model.Entity) {
	user := entity.(*User)
	*users = append(*users, *user)
}

func (users *pusers) New() model.Entity {
	return &User{}
}

func (users *pusers) Add(entity model.Entity) {
	user := *entity.(*User)
	*users = append(*users, &user)
}

func NewUsers(capacity int) users {
	return make([]User, 0, capacity)
}

func NewPtrUsers(capacity int) pusers {
	return make([]*User, 0, capacity)
}

func (user *User) InsertFields() (string, string, []any) {
	return `"name", "email", "address", "city", "state", "zip", "birthDate", "latitude", "longitude", "password", "source"`, `$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11`, []any{user.Name, user.Email, user.Address, user.City, user.State, user.Zip, user.BirthDate, user.Latitude, user.Longitude, user.Password, user.Source}
}

type UserInput struct {
	Name      NullString
	Email     NullString
	Address   NullString
	City      NullString
	State     NullString
	Zip       NullString
	BirthDate NullTime
	Latitude  NullDouble
	Longitude NullDouble
	Password  NullString
	Source    NullString
}

func (user *UserInput) InsertFields() (string, string, []any) {
	f := fields{make([]byte, 0, 128), make([]byte, 0, 64), make([]any, 0, 11)}
	switch user.Name.State {
	case Exists:
		f.addField("name", user.Name.Value)
	case Null:
		f.addField("name", nil)
	}
	switch user.Email.State {
	case Exists:
		f.addField("email", user.Email.Value)
	case Null:
		f.addField("email", nil)
	}
	switch user.Address.State {
	case Exists:
		f.addField("address", user.Address.Value)
	case Null:
		f.addField("address", nil)
	}
	switch user.City.State {
	case Exists:
		f.addField("city", user.City.Value)
	case Null:
		f.addField("city", nil)
	}
	switch user.State.State {
	case Exists:
		f.addField("state", user.State.Value)
	case Null:
		f.addField("state", nil)
	}
	switch user.Zip.State {
	case Exists:
		f.addField("zip", user.Zip.Value)
	case Null:
		f.addField("zip", nil)
	}
	switch user.BirthDate.State {
	case Exists:
		f.addField("birthDate", user.BirthDate.Value)
	case Null:
		f.addField("birthDate", nil)
	}
	switch user.Latitude.State {
	case Exists:
		f.addField("latitude", user.Latitude.Value)
	case Null:
		f.addField("latitude", nil)
	}
	switch user.Longitude.State {
	case Exists:
		f.addField("longitude", user.Longitude.Value)
	case Null:
		f.addField("longitude", nil)
	}
	switch user.Password.State {
	case Exists:
		f.addField("password", user.Password.Value)
	case Null:
		f.addField("password", nil)
	}
	switch user.Source.State {
	case Exists:
		f.addField("source", user.Source.Value)
	case Null:
		f.addField("source", nil)
	}
	return f.get()
}
