//go:build ignore

package main

import (
	"go/ast"
	"io"
	"log"
	"os"
	"strings"
	"text/template"

	"github.com/fatih/structtag"
	"github.com/iancoleman/strcase"
	. "graphql-project/generator"
)

type Field struct {
	Name     string
	Column   string // db column name
	Property string // GQL property name
}

type Parameters struct {
	Type     string
	ObjectID string
	Fields   []Field
	Identity Field
}

// `dbe:"id,pk"`
// `gql:"user"`
type Tags structtag.Tags

func (field *Field) IsID() bool {
	return strings.ToLower(field.Column) == "id"
}

// db column name
func (tags *Tags) Column(fieldName string) string {
	return GetTagName((*structtag.Tags)(tags), "dbe", strcase.ToLowerCamel(fieldName))
}

// GQL property name
func (tags *Tags) Property(fieldName string) string {
	return GetTagName((*structtag.Tags)(tags), "gql", strcase.ToLowerCamel(fieldName))
}

func (tags *Tags) IsPK() bool {
	pk := GetTagOption((*structtag.Tags)(tags), "dbe", 0, "")
	return strings.ToLower(pk) == "pk"
}

func main() {
	if err := Generate(os.Getenv("GOPACKAGE"), ".", os.Getenv("GOFILE"), generate); err != nil {
		log.Fatal(err)
	}
}

func getFields(typeName string, structType *ast.StructType) Parameters {
	params := Parameters{
		Type:     typeName,
		ObjectID: strcase.ToLowerCamel(typeName),
		Fields:   make([]Field, 0, len(structType.Fields.List)+8),
	}
	for _, f := range structType.Fields.List {
		tags := (*Tags)(FieldTags(f.Tag))
		for _, ident := range f.Names {
			name := ident.Name
			field := Field{Name: name, Column: tags.Column(name), Property: tags.Property(name)}
			params.Fields = append(params.Fields, field)
			if tags.IsPK() || field.IsID() {
				params.Identity = field
			}
		}
	}
	return params
}

func generate(writer io.Writer, packageName string, types StructTypes) error {
	params := struct{ Package string }{packageName}
	if err := headerTemplate.Execute(writer, params); err != nil {
		return err
	}

	for typeName, structType := range types {
		if err := entityImplTemplate.Execute(writer, getFields(typeName, structType)); err != nil {
			return err
		}
	}
	return nil
}

func columnList(fields []Field) string {
	var sb strings.Builder
	sb.Grow(256)
	sb.WriteByte('`')
	for i, field := range fields {
		if i > 0 {
			sb.WriteByte(',')
			sb.WriteByte(' ')
		}
		sb.WriteByte('"')
		sb.WriteString(field.Column)
		sb.WriteByte('"')
	}
	sb.WriteByte('`')
	return sb.String()
}

func fieldList(objectID string, fields []Field) string {
	var sb strings.Builder
	sb.Grow(256)
	for i, field := range fields {
		if i > 0 {
			sb.WriteByte(',')
			sb.WriteByte(' ')
		}
		sb.WriteByte('&')
		sb.WriteString(objectID)
		sb.WriteByte('.')
		sb.WriteString(field.Name)
	}
	return sb.String()
}

var headerTemplate = template.Must(template.New("header").Parse(`// Code generated by gen; DO NOT EDIT.
package {{.Package}}
`))

var entityImplTemplate = template.Must(template.New("body").Funcs(template.FuncMap{"columnList": columnList, "fieldList": fieldList}).Parse(`
func ({{.ObjectID}} *{{.Type}}) Clone() {{.Type}} {
	return {{.Type}}{
{{- range .Fields}}
		{{.Name}}: {{$.ObjectID}}.{{.Name}},
{{- end}}
	}
}

func ({{.ObjectID}} *{{.Type}}) Field(property string) (string, any) {
	switch property {
{{- range .Fields}}
	case "{{.Property}}":
		return "{{.Column}}", &{{$.ObjectID}}.{{.Name}}
{{- end}}
	default:
		return "", nil
	}
}

func ({{.ObjectID}} *{{.Type}}) Identity() (string, any) {
	return "{{.Identity.Column}}", &{{$.ObjectID}}.{{.Identity.Name}}
}

func ({{.ObjectID}} *{{.Type}}) Fields() (string, []any) {
	return {{columnList .Fields}}, []any{ {{fieldList .ObjectID .Fields}} }
}
`))
