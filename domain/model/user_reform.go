// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type userTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *userTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("users").
func (v *userTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *userTableType) Columns() []string {
	return []string{
		"id",
		"createdAt",
		"name",
		"email",
		"address",
		"city",
		"state",
		"zip",
		"birthDate",
		"latitude",
		"longitude",
		"password",
		"source",
		"deletedAt",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *userTableType) NewStruct() reform.Struct {
	return new(User)
}

// NewRecord makes a new record for that table.
func (v *userTableType) NewRecord() reform.Record {
	return new(User)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *userTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// UserTable represents users view or table in SQL database.
var UserTable = &userTableType{
	s: parse.StructInfo{
		Type:    "User",
		SQLName: "users",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "int64", Column: "id"},
			{Name: "CreatedAt", Type: "time.Time", Column: "createdAt"},
			{Name: "Name", Type: "string", Column: "name"},
			{Name: "Email", Type: "string", Column: "email"},
			{Name: "Address", Type: "string", Column: "address"},
			{Name: "City", Type: "string", Column: "city"},
			{Name: "State", Type: "string", Column: "state"},
			{Name: "Zip", Type: "string", Column: "zip"},
			{Name: "BirthDate", Type: "time.Time", Column: "birthDate"},
			{Name: "Latitude", Type: "float64", Column: "latitude"},
			{Name: "Longitude", Type: "float64", Column: "longitude"},
			{Name: "Password", Type: "string", Column: "password"},
			{Name: "Source", Type: "string", Column: "source"},
			{Name: "DeletedAt", Type: "sql.NullTime", Column: "deletedAt"},
		},
		PKFieldIndex: 0,
	},
	z: new(User).Values(),
}

// String returns a string representation of this struct or record.
func (s User) String() string {
	res := make([]string, 14)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[2] = "Name: " + reform.Inspect(s.Name, true)
	res[3] = "Email: " + reform.Inspect(s.Email, true)
	res[4] = "Address: " + reform.Inspect(s.Address, true)
	res[5] = "City: " + reform.Inspect(s.City, true)
	res[6] = "State: " + reform.Inspect(s.State, true)
	res[7] = "Zip: " + reform.Inspect(s.Zip, true)
	res[8] = "BirthDate: " + reform.Inspect(s.BirthDate, true)
	res[9] = "Latitude: " + reform.Inspect(s.Latitude, true)
	res[10] = "Longitude: " + reform.Inspect(s.Longitude, true)
	res[11] = "Password: " + reform.Inspect(s.Password, true)
	res[12] = "Source: " + reform.Inspect(s.Source, true)
	res[13] = "DeletedAt: " + reform.Inspect(s.DeletedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *User) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.CreatedAt,
		s.Name,
		s.Email,
		s.Address,
		s.City,
		s.State,
		s.Zip,
		s.BirthDate,
		s.Latitude,
		s.Longitude,
		s.Password,
		s.Source,
		s.DeletedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *User) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.CreatedAt,
		&s.Name,
		&s.Email,
		&s.Address,
		&s.City,
		&s.State,
		&s.Zip,
		&s.BirthDate,
		&s.Latitude,
		&s.Longitude,
		&s.Password,
		&s.Source,
		&s.DeletedAt,
	}
}

// View returns View object for that struct.
func (s *User) View() reform.View {
	return UserTable
}

// Table returns Table object for that record.
func (s *User) Table() reform.Table {
	return UserTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *User) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *User) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *User) HasPK() bool {
	return s.ID != UserTable.z[UserTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *User) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = UserTable
	_ reform.Struct = (*User)(nil)
	_ reform.Table  = UserTable
	_ reform.Record = (*User)(nil)
	_ fmt.Stringer  = (*User)(nil)
)

func init() {
	parse.AssertUpToDate(&UserTable.s, new(User))
}
