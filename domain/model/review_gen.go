// Code generated by gen; DO NOT EDIT.
package model

import (
	"github.com/jackc/pgx/v5"

	"graphql-project/interface/model"
)

func (review *Review) Table() string {
	return "reviews"
}

func (review *Review) Field(property string) string {
	switch property {
	case "id":
		return "id"
	case "createdAt":
		return "createdAt"
	case "reviewer":
		return "reviewer"
	case "product":
		return "productId"
	case "rating":
		return "rating"
	case "body":
		return "body"
	case "deletedAt":
		return "deletedAt"
	default:
		return ""
	}
}

func (review *Review) Fields() string {
	return `"id", "createdAt", "reviewer", "productId", "rating", "body", "deletedAt"`
}

func (review *Review) Identity() string {
	return "id"
}

func (review *Review) ScanRow(rows pgx.Rows) error {
	values := rows.RawValues()
	for i, fieldDesc := range rows.FieldDescriptions() {
		v := value(values[i])
		switch fieldDesc.Name {
		case "id":
			review.ID = v.Int64()
		case "createdAt":
			review.CreatedAt = v.Time()
		case "reviewer":
			review.Reviewer = v.String()
		case "productId":
			review.ProductId = v.Int64()
		case "rating":
			review.Rating = v.Int32()
		case "body":
			review.Body = v.String()
		case "deletedAt":
			if v != nil {
				n := v.Time()
				review.DeletedAt = &n
			} else {
				review.DeletedAt = nil
			}
		}
	}
	return nil
}

type Reviews []Review
type ReviewRefs []*Review

func (Reviews *Reviews) New() model.Entity {
	return &Review{}
}

func (Reviews *Reviews) Add(entity model.Entity) {
	review := entity.(*Review)
	*Reviews = append(*Reviews, *review)
}

func (Reviews *ReviewRefs) New() model.Entity {
	return &Review{}
}

func (Reviews *ReviewRefs) Add(entity model.Entity) {
	review := *entity.(*Review)
	*Reviews = append(*Reviews, &review)
}

func (review *Review) getReviewer() any {
	return (review.Reviewer)
}

func (review *Review) getProductId() any {
	return (review.ProductId)
}

func (review *Review) getRating() any {
	return (review.Rating)
}

func (review *Review) getBody() any {
	return (review.Body)
}

func (review *Review) InsertFields() (string, string, []any) {
	values := []any{
		review.getReviewer(),
		review.getProductId(),
		review.getRating(),
		review.getBody(),
	}
	return `"reviewer", "productId", "rating", "body"`, `$1, $2, $3, $4`, values
}

type ReviewInput struct {
	Reviewer  NullString
	ProductId NullBigInt
	Rating    NullInt
	Body      NullString
}

func (review *ReviewInput) InsertFields() (string, string, []any) {
	f := fields{make([]byte, 0, 128), make([]byte, 0, 64), make([]any, 0, 4)}
	f.addField("reviewer", review.Reviewer)
	f.addField("productId", review.ProductId)
	f.addField("rating", review.Rating)
	f.addField("body", review.Body)
	return f.get()
}
