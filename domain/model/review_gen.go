// Code generated by gen; DO NOT EDIT.
package model

import (
	"graphql-project/interface/model"
)

func (review *Review) Table() string {
	return "reviews"
}

func (review *Review) Field(property string) (string, any) {
	switch property {
	case "id":
		return "id", &review.ID
	case "createdAt":
		return "createdAt", &review.CreatedAt
	case "reviewer":
		return "reviewer", &review.Reviewer
	case "product":
		return "productId", &review.ProductId
	case "rating":
		return "rating", &review.Rating
	case "body":
		return "body", &review.Body
	case "deletedAt":
		return "deletedAt", &review.DeletedAt
	default:
		return "", nil
	}
}

func (review *Review) Fields() (string, []any) {
	return `"id", "createdAt", "reviewer", "productId", "rating", "body", "deletedAt"`, []any{&review.ID, &review.CreatedAt, &review.Reviewer, &review.ProductId, &review.Rating, &review.Body, &review.DeletedAt}
}

func (review *Review) Identity() (string, any) {
	return "id", &review.ID
}

type reviews []Review
type previews []*Review

func (reviews *reviews) New() model.Entity {
	return &Review{}
}

func (reviews *reviews) Add(entity model.Entity) {
	review := entity.(*Review)
	*reviews = append(*reviews, *review)
}

func (reviews *previews) New() model.Entity {
	return &Review{}
}

func (reviews *previews) Add(entity model.Entity) {
	review := *entity.(*Review)
	*reviews = append(*reviews, &review)
}

func NewReviews(capacity int) reviews {
	return make([]Review, 0, capacity)
}

func NewPtrReviews(capacity int) previews {
	return make([]*Review, 0, capacity)
}

func (review *Review) InsertFields() (string, string, []any) {
	return `"reviewer", "productId", "rating", "body"`, `$1, $2, $3, $4`, []any{review.Reviewer, review.ProductId, review.Rating, review.Body}
}

type ReviewInput struct {
	Reviewer  NullString
	ProductId NullBigInt
	Rating    NullInt
	Body      NullString
}

func (review *ReviewInput) InsertFields() (string, string, []any) {
	f := fields{make([]byte, 0, 128), make([]byte, 0, 64), make([]any, 0, 4)}
	switch review.Reviewer.State {
	case Exists:
		f.addField("reviewer", review.Reviewer.Value)
	case Null:
		f.addField("reviewer", nil)
	}
	switch review.ProductId.State {
	case Exists:
		f.addField("productId", review.ProductId.Value)
	case Null:
		f.addField("productId", nil)
	}
	switch review.Rating.State {
	case Exists:
		f.addField("rating", review.Rating.Value)
	case Null:
		f.addField("rating", nil)
	}
	switch review.Body.State {
	case Exists:
		f.addField("body", review.Body.Value)
	case Null:
		f.addField("body", nil)
	}
	return f.get()
}
