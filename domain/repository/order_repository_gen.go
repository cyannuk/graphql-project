// Code generated by gen; DO NOT EDIT.
package repository

import (
	"context"
	"graphql-project/domain/model"
)

func (r *OrderRepository) GetOrderByID(ctx context.Context, id int64) (*model.Order, error) {
	var order model.Order
	err := FindEntity(ctx, (*DataSource)(r), &order, SelectById(ctx, id))
	if err != nil {
		return nil, err
	}
	return &order, nil
}

func (r *OrderRepository) GetOrders(ctx context.Context, offset int32, limit int32) ([]model.Order, error) {
	var orders model.Orders = make([]model.Order, 0, max(int(limit), 128))
	err := FindEntities(ctx, (*DataSource)(r), &orders, SelectMany(ctx, offset, limit))
	if err != nil {
		return nil, err
	}
	return orders, nil
}

func (r *OrderRepository) GetOrderByIds(ctx context.Context, ids []int64) ([]*model.Order, []error) {
	var orders model.OrderRefs = make([]*model.Order, 0, len(ids))
	err := FindEntities(ctx, (*DataSource)(r), &orders, SelectByIds(ctx, ids))
	if err != nil {
		return nil, []error{err}
	}
	if len(orders) < len(ids) {
		buffer := make([]*model.Order, len(ids))
		n := 0
		for i, id := range ids {
			order := orders[n]
			if order.ID == id {
				buffer[i] = order
				n++
			}
		}
		orders = buffer
	}
	return orders, nil
}

func (r *OrderRepository) CreateOrder(ctx context.Context, inputOrder *model.Order) (*model.Order, error) {
	order, err := InsertEntity(ctx, (*DataSource)(r), inputOrder)
	if err != nil {
		return nil, err
	}
	return order.(*model.Order), err
}

func (r *OrderRepository) UpdateOrder(ctx context.Context, id int64, inputOrder *model.OrderInput) (*model.Order, error) {
	order, err := UpdateEntity(ctx, (*DataSource)(r), id, inputOrder)
	if err != nil {
		return nil, err
	}
	return order.(*model.Order), err
}

func NewOrderRepository(dataSource *DataSource) *OrderRepository {
	return (*OrderRepository)(dataSource)
}
