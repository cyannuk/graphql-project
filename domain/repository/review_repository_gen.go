// Code generated by gen; DO NOT EDIT.
package repository

import (
	"context"
	"graphql-project/domain/model"
)

func (r *ReviewRepository) GetReviewByID(ctx context.Context, id int64) (*model.Review, error) {
	var review model.Review
	err := FindEntity(ctx, (*DataSource)(r), &review, SelectById(ctx, id))
	if err != nil {
		return nil, err
	}
	return &review, nil
}

func (r *ReviewRepository) GetReviews(ctx context.Context, offset int32, limit int32) ([]model.Review, error) {
	var reviews model.Reviews = make([]model.Review, 0, max(int(limit), 128))
	err := FindEntities(ctx, (*DataSource)(r), &reviews, SelectMany(ctx, offset, limit))
	if err != nil {
		return nil, err
	}
	return reviews, nil
}

func (r *ReviewRepository) GetReviewByIds(ctx context.Context, ids []int64) ([]*model.Review, []error) {
	var reviews model.ReviewRefs = make([]*model.Review, 0, len(ids))
	err := FindEntities(ctx, (*DataSource)(r), &reviews, SelectByIds(ctx, ids))
	if err != nil {
		return nil, []error{err}
	}
	if len(reviews) < len(ids) {
		buffer := make([]*model.Review, len(ids))
		n := 0
		for i, id := range ids {
			review := reviews[n]
			if review.ID == id {
				buffer[i] = review
				n++
			}
		}
		reviews = buffer
	}
	return reviews, nil
}

func (r *ReviewRepository) CreateReview(ctx context.Context, inputReview *model.Review) (*model.Review, error) {
	review, err := InsertEntity(ctx, (*DataSource)(r), inputReview)
	if err != nil {
		return nil, err
	}
	return review.(*model.Review), err
}

func (r *ReviewRepository) UpdateReview(ctx context.Context, id int64, inputReview *model.ReviewInput) (*model.Review, error) {
	review, err := UpdateEntity(ctx, (*DataSource)(r), id, inputReview)
	if err != nil {
		return nil, err
	}
	return review.(*model.Review), err
}

func NewReviewRepository(dataSource *DataSource) *ReviewRepository {
	return (*ReviewRepository)(dataSource)
}
