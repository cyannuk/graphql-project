// Code generated by gen; DO NOT EDIT.
package repository

{{$defaultSliceSize := 128}}
{{$modelNames := .ModelName | plural}}
{{$table := .ModelName | toSnake | plural}}
{{$varName := .ModelName | toLowerCamel}}
{{$sliceName := $varName | plural}}
func (r *{{.RepoType}}) Get{{.ModelName}}ByID(ctx context.Context, id int64) (*{{.ModelType}}, error) {
	var {{$varName}} {{.ModelType}}
	err := FindEntity(ctx, (*DataSource)(r), &{{$varName}}, SelectById(ctx, id))
	if err != nil {
		return nil, err
	}
	return &{{$varName}}, nil
}

func (r *{{.RepoType}}) Get{{$modelNames}}(ctx context.Context, offset int32, limit int32) ([]{{.ModelType}}, error) {
	var {{$sliceName}} {{.ModelType | plural}} = make([]{{.ModelType}}, 0, max(int(limit), {{$defaultSliceSize}}))
	err := FindEntities(ctx, (*DataSource)(r), &{{$sliceName}}, SelectMany(ctx, offset, limit))
	if err != nil {
		return nil, err
	}
	return {{$sliceName}}, nil
}

func (r *{{.RepoType}}) Get{{.ModelName}}ByIds(ctx context.Context, ids []int64) ([]*{{.ModelType}}, []error) {
	var {{$sliceName}} {{.ModelType}}Refs = make([]*{{.ModelType}}, 0, len(ids))
	err := FindEntities(ctx, (*DataSource)(r), &{{$sliceName}}, SelectByIds(ctx, ids))
	if err != nil {
		return nil, []error{err}
	}
	if len({{$sliceName}}) < len(ids) {
		buffer := make([]*{{.ModelType}}, len(ids))
		n := 0
		for i, id := range ids {
			{{$varName}} := {{$sliceName}}[n]
			if {{$varName}}.ID == id {
				buffer[i] = {{$varName}}
				n++
			}
		}
		{{$sliceName}} = buffer
	}
	return {{$sliceName}}, nil
}

{{$inputModelType := join .ModelType "Input"}}
{{$inputArg := join "input" .ModelName}}
func (r *{{.RepoType}}) Create{{.ModelName}}(ctx context.Context, {{$inputArg}} *{{.ModelType}}) (*{{.ModelType}}, error) {
	{{$varName}}, err := InsertEntity(ctx, (*DataSource)(r), {{$inputArg}})
	if err != nil {
		return nil, err
	}
	return {{$varName}}.(*{{.ModelType}}), err
}

func (r *{{.RepoType}}) Update{{.ModelName}}(ctx context.Context, id int64, {{$inputArg}} *{{$inputModelType}}) (*{{.ModelType}}, error) {
	{{$varName}}, err := UpdateEntity(ctx, (*DataSource)(r), id, {{$inputArg}})
	if err != nil {
		return nil, err
	}
	return {{$varName}}.(*{{.ModelType}}), err
}

func New{{.ModelName}}Repository(dataSource *DataSource) *{{.RepoType}} {
	return (*{{.RepoType}})(dataSource)
}
