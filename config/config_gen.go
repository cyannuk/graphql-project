// Code generated by gen; DO NOT EDIT.
package config

import (
	"bufio"
	"encoding/base64"
	"errors"
	"flag"
	"graphql-project/core"
	"net/netip"
	"os"
	"strconv"
	"strings"
	"time"
)

var (
	bindAddr         string
	port             string
	jwtSecret        string
	jwtExpiration    string
	queryComplexity  string
	dbHost           string
	dbPort           string
	dbUser           string
	dbPassword       string
	dbName           string
	dbTimeout        string
	dbMaxConnections string
	dbMigrate        string
	logLevel         string
)

func init() {
	flag.StringVar(&bindAddr, "bind-addr", "", "bind host address")
	flag.StringVar(&port, "port", "", "listen port")
	flag.StringVar(&jwtSecret, "jwt-secret", "", "base64 encoded JWT secret")
	flag.StringVar(&jwtExpiration, "jwt-expiration", "", "JWT expiration time in hours")
	flag.StringVar(&queryComplexity, "query-complexity", "", "GQL query max complexity")
	flag.StringVar(&dbHost, "db-host", "", "database host address")
	flag.StringVar(&dbPort, "db-port", "", "database port")
	flag.StringVar(&dbUser, "db-user", "", "database user")
	flag.StringVar(&dbPassword, "db-password", "", "database user password")
	flag.StringVar(&dbName, "db-name", "", "database name")
	flag.StringVar(&dbTimeout, "db-timeout", "", "database connection timeout")
	flag.StringVar(&dbMaxConnections, "db-connections", "", "max database connections")
	flag.StringVar(&dbMigrate, "db-migrate", "false", "Apply database migrations")
	flag.StringVar(&logLevel, "log-level", "", "log level: debug")
	flag.Parse()
}

func (config *Config) BindAddr() netip.Addr {
	return config.bindAddr
}

func (config *Config) Port() uint16 {
	return config.port
}

func (config *Config) JwtSecret() []byte {
	return config.jwtSecret
}

func (config *Config) JwtExpiration() time.Duration {
	return config.jwtExpiration
}

func (config *Config) QueryComplexity() int {
	return config.queryComplexity
}

func (config *Config) DbHost() netip.Addr {
	return config.dbHost
}

func (config *Config) DbPort() uint16 {
	return config.dbPort
}

func (config *Config) DbUser() string {
	return config.dbUser
}

func (config *Config) DbPassword() string {
	return config.dbPassword
}

func (config *Config) DbName() string {
	return config.dbName
}

func (config *Config) DbTimeout() int32 {
	return config.dbTimeout
}

func (config *Config) DbMaxConnections() int32 {
	return config.dbMaxConnections
}

func (config *Config) DbMigrate() bool {
	return config.dbMigrate
}

func (config *Config) LogLevel() string {
	return config.logLevel
}

func loadDotEnvFile(fileName string) (map[string]string, error) {
	if file, err := os.OpenFile(fileName, os.O_RDONLY, 0); err != nil {
		return nil, err
	} else {
		defer file.Close()

		stringBuffer := make([]string, 0, 128)
		scanner := bufio.NewScanner(file)
		for scanner.Scan() {
			stringBuffer = append(stringBuffer, scanner.Text())
		}
		if err := scanner.Err(); err != nil {
			return nil, err
		}

		values := make(map[string]string)
		for _, str := range stringBuffer {
			if core.StartWith(str, '#') {
				continue
			}
			if i := strings.IndexByte(str, '='); i > 0 {
				param := strings.TrimSpace(str[:i])
				if param != "" {
					value := str[i+1:]
					if i := strings.IndexByte(value, '#'); i >= 0 {
						value = value[:i]
					}
					value = core.TrimQuotes(strings.TrimSpace(value))
					if value != "" {
						values[param] = value
					}
				}
			}
		}

		return values, nil
	}
}

func (config *Config) loadEnv(exists map[string]bool) error {
	if s, ok := os.LookupEnv("ADDRESS"); !ok || s == "" {
		return nil
	} else {
		if v, err := netip.ParseAddr(s); err != nil {
			return err
		} else {
			config.bindAddr = v
		}
		exists["bindAddr"] = true
	}
	if s, ok := os.LookupEnv("PORT"); !ok || s == "" {
		return nil
	} else {
		if v, err := strconv.ParseUint(s, 10, 16); err != nil {
			return err
		} else {
			config.port = uint16(v)
		}
		exists["port"] = true
	}
	if s, ok := os.LookupEnv("JWT_SECRET"); !ok || s == "" {
		return nil
	} else {
		if v, err := base64.StdEncoding.DecodeString(s); err != nil {
			return err
		} else {
			config.jwtSecret = v
		}
		exists["jwtSecret"] = true
	}
	if s, ok := os.LookupEnv("JWT_EXPIRATION"); !ok || s == "" {
		return nil
	} else {
		if v, err := strconv.ParseInt(s, 10, 64); err != nil {
			return err
		} else {
			config.jwtExpiration = time.Duration(v)
		}
		exists["jwtExpiration"] = true
	}
	if s, ok := os.LookupEnv("GQL_QUERY_COMPLEXITY"); !ok || s == "" {
		return nil
	} else {
		if v, err := strconv.ParseInt(s, 10, 64); err != nil {
			return err
		} else {
			config.queryComplexity = int(v)
		}
		exists["queryComplexity"] = true
	}
	if s, ok := os.LookupEnv("DB_HOST"); !ok || s == "" {
		return nil
	} else {
		if v, err := netip.ParseAddr(s); err != nil {
			return err
		} else {
			config.dbHost = v
		}
		exists["dbHost"] = true
	}
	if s, ok := os.LookupEnv("DB_PORT"); !ok || s == "" {
		return nil
	} else {
		if v, err := strconv.ParseUint(s, 10, 16); err != nil {
			return err
		} else {
			config.dbPort = uint16(v)
		}
		exists["dbPort"] = true
	}
	if s, ok := os.LookupEnv("DB_USER"); !ok || s == "" {
		return nil
	} else {
		config.dbUser = s
		exists["dbUser"] = true
	}
	if s, ok := os.LookupEnv("DB_PASSWORD"); !ok || s == "" {
		return nil
	} else {
		config.dbPassword = s
		exists["dbPassword"] = true
	}
	if s, ok := os.LookupEnv("DB_NAME"); !ok || s == "" {
		return nil
	} else {
		config.dbName = s
		exists["dbName"] = true
	}
	if s, ok := os.LookupEnv("DB_TIMEOUT"); !ok || s == "" {
		return nil
	} else {
		if v, err := strconv.ParseInt(s, 10, 32); err != nil {
			return err
		} else {
			config.dbTimeout = int32(v)
		}
		exists["dbTimeout"] = true
	}
	if s, ok := os.LookupEnv("DB_CONNECTIONS"); !ok || s == "" {
		return nil
	} else {
		if v, err := strconv.ParseInt(s, 10, 32); err != nil {
			return err
		} else {
			config.dbMaxConnections = int32(v)
		}
		exists["dbMaxConnections"] = true
	}
	if s, ok := os.LookupEnv("DB_MIGRATE"); !ok || s == "" {
		return nil
	} else {
		s = strings.ToLower(s)
		var v bool
		if s == "0" || s == "n" {
			v = false
		} else if s == "1" || s == "y" {
			v = true
		} else if b, err := strconv.ParseBool(s); err != nil {
			return err
		} else {
			v = b
		}
		config.dbMigrate = v
		exists["dbMigrate"] = true
	}
	if s, ok := os.LookupEnv("LOG_LEVEL"); !ok || s == "" {
		return nil
	} else {
		config.logLevel = s
		exists["logLevel"] = true
	}
	return nil
}

func (config *Config) loadDotEnv(exists map[string]bool) error {
	if values, err := loadDotEnvFile(".env"); err != nil {
		if err == os.ErrNotExist {
			return nil
		}
		return err
	} else {
		if s, ok := values["ADDRESS"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: bindAddr")
			} else {
				if v, err := netip.ParseAddr(s); err != nil {
					return err
				} else {
					config.bindAddr = v
				}
				exists["bindAddr"] = true
			}
		}
		if s, ok := values["PORT"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: port")
			} else {
				if v, err := strconv.ParseUint(s, 10, 16); err != nil {
					return err
				} else {
					config.port = uint16(v)
				}
				exists["port"] = true
			}
		}
		if s, ok := values["JWT_SECRET"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: jwtSecret")
			} else {
				if v, err := base64.StdEncoding.DecodeString(s); err != nil {
					return err
				} else {
					config.jwtSecret = v
				}
				exists["jwtSecret"] = true
			}
		}
		if s, ok := values["JWT_EXPIRATION"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: jwtExpiration")
			} else {
				if v, err := strconv.ParseInt(s, 10, 64); err != nil {
					return err
				} else {
					config.jwtExpiration = time.Duration(v)
				}
				exists["jwtExpiration"] = true
			}
		}
		if s, ok := values["GQL_QUERY_COMPLEXITY"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: queryComplexity")
			} else {
				if v, err := strconv.ParseInt(s, 10, 64); err != nil {
					return err
				} else {
					config.queryComplexity = int(v)
				}
				exists["queryComplexity"] = true
			}
		}
		if s, ok := values["DB_HOST"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: dbHost")
			} else {
				if v, err := netip.ParseAddr(s); err != nil {
					return err
				} else {
					config.dbHost = v
				}
				exists["dbHost"] = true
			}
		}
		if s, ok := values["DB_PORT"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: dbPort")
			} else {
				if v, err := strconv.ParseUint(s, 10, 16); err != nil {
					return err
				} else {
					config.dbPort = uint16(v)
				}
				exists["dbPort"] = true
			}
		}
		if s, ok := values["DB_USER"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: dbUser")
			} else {
				config.dbUser = s
				exists["dbUser"] = true
			}
		}
		if s, ok := values["DB_PASSWORD"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: dbPassword")
			} else {
				config.dbPassword = s
				exists["dbPassword"] = true
			}
		}
		if s, ok := values["DB_NAME"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: dbName")
			} else {
				config.dbName = s
				exists["dbName"] = true
			}
		}
		if s, ok := values["DB_TIMEOUT"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: dbTimeout")
			} else {
				if v, err := strconv.ParseInt(s, 10, 32); err != nil {
					return err
				} else {
					config.dbTimeout = int32(v)
				}
				exists["dbTimeout"] = true
			}
		}
		if s, ok := values["DB_CONNECTIONS"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: dbMaxConnections")
			} else {
				if v, err := strconv.ParseInt(s, 10, 32); err != nil {
					return err
				} else {
					config.dbMaxConnections = int32(v)
				}
				exists["dbMaxConnections"] = true
			}
		}
		if s, ok := values["DB_MIGRATE"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: dbMigrate")
			} else {
				s = strings.ToLower(s)
				var v bool
				if s == "0" || s == "n" {
					v = false
				} else if s == "1" || s == "y" {
					v = true
				} else if b, err := strconv.ParseBool(s); err != nil {
					return err
				} else {
					v = b
				}
				config.dbMigrate = v
				exists["dbMigrate"] = true
			}
		}
		if s, ok := values["LOG_LEVEL"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: logLevel")
			} else {
				config.logLevel = s
				exists["logLevel"] = true
			}
		}
	}
	return nil
}

func (config *Config) loadFlags(exists map[string]bool) error {
	var s string
	s = bindAddr
	if s != "" {
		if v, err := netip.ParseAddr(s); err != nil {
			return err
		} else {
			config.bindAddr = v
		}
		exists["bindAddr"] = true
	}
	s = port
	if s != "" {
		if v, err := strconv.ParseUint(s, 10, 16); err != nil {
			return err
		} else {
			config.port = uint16(v)
		}
		exists["port"] = true
	}
	s = jwtSecret
	if s != "" {
		if v, err := base64.StdEncoding.DecodeString(s); err != nil {
			return err
		} else {
			config.jwtSecret = v
		}
		exists["jwtSecret"] = true
	}
	s = jwtExpiration
	if s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err != nil {
			return err
		} else {
			config.jwtExpiration = time.Duration(v)
		}
		exists["jwtExpiration"] = true
	}
	s = queryComplexity
	if s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err != nil {
			return err
		} else {
			config.queryComplexity = int(v)
		}
		exists["queryComplexity"] = true
	}
	s = dbHost
	if s != "" {
		if v, err := netip.ParseAddr(s); err != nil {
			return err
		} else {
			config.dbHost = v
		}
		exists["dbHost"] = true
	}
	s = dbPort
	if s != "" {
		if v, err := strconv.ParseUint(s, 10, 16); err != nil {
			return err
		} else {
			config.dbPort = uint16(v)
		}
		exists["dbPort"] = true
	}
	s = dbUser
	if s != "" {
		config.dbUser = s
		exists["dbUser"] = true
	}
	s = dbPassword
	if s != "" {
		config.dbPassword = s
		exists["dbPassword"] = true
	}
	s = dbName
	if s != "" {
		config.dbName = s
		exists["dbName"] = true
	}
	s = dbTimeout
	if s != "" {
		if v, err := strconv.ParseInt(s, 10, 32); err != nil {
			return err
		} else {
			config.dbTimeout = int32(v)
		}
		exists["dbTimeout"] = true
	}
	s = dbMaxConnections
	if s != "" {
		if v, err := strconv.ParseInt(s, 10, 32); err != nil {
			return err
		} else {
			config.dbMaxConnections = int32(v)
		}
		exists["dbMaxConnections"] = true
	}
	s = dbMigrate
	if s != "" {
		s = strings.ToLower(s)
		var v bool
		if s == "0" || s == "n" {
			v = false
		} else if s == "1" || s == "y" {
			v = true
		} else if b, err := strconv.ParseBool(s); err != nil {
			return err
		} else {
			v = b
		}
		config.dbMigrate = v
		exists["dbMigrate"] = true
	}
	s = logLevel
	if s != "" {
		config.logLevel = s
		exists["logLevel"] = true
	}
	return nil
}

func (config *Config) Load() error {
	exists := make(map[string]bool)
	if err := config.loadEnv(exists); err != nil {
		return err
	}
	if err := config.loadDotEnv(exists); err != nil {
		if !errors.Is(err, os.ErrNotExist) {
			return err
		}
	}
	if err := config.loadFlags(exists); err != nil {
		return err
	}
	if v, ok := exists["bindAddr"]; !ok || !v {
		return errors.New("no configuration parameter: bindAddr")
	}
	if v, ok := exists["port"]; !ok || !v {
		return errors.New("no configuration parameter: port")
	}
	if v, ok := exists["jwtSecret"]; !ok || !v {
		return errors.New("no configuration parameter: jwtSecret")
	}
	if v, ok := exists["jwtExpiration"]; !ok || !v {
		return errors.New("no configuration parameter: jwtExpiration")
	}
	if v, ok := exists["queryComplexity"]; !ok || !v {
		return errors.New("no configuration parameter: queryComplexity")
	}
	if v, ok := exists["dbHost"]; !ok || !v {
		return errors.New("no configuration parameter: dbHost")
	}
	if v, ok := exists["dbPort"]; !ok || !v {
		return errors.New("no configuration parameter: dbPort")
	}
	if v, ok := exists["dbUser"]; !ok || !v {
		return errors.New("no configuration parameter: dbUser")
	}
	if v, ok := exists["dbPassword"]; !ok || !v {
		return errors.New("no configuration parameter: dbPassword")
	}
	if v, ok := exists["dbName"]; !ok || !v {
		return errors.New("no configuration parameter: dbName")
	}
	if v, ok := exists["dbTimeout"]; !ok || !v {
		return errors.New("no configuration parameter: dbTimeout")
	}
	if v, ok := exists["dbMaxConnections"]; !ok || !v {
		return errors.New("no configuration parameter: dbMaxConnections")
	}
	if v, ok := exists["logLevel"]; !ok || !v {
		return errors.New("no configuration parameter: logLevel")
	}
	return nil
}
