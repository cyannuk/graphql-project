// Code generated by gen; DO NOT EDIT.
package config

{{define "valueHandler" -}}
	{{if gt .Bits 0 -}}
		{{if .Float -}}
		if v, err := strconv.ParseFloat(s, {{.Bits}}); err != nil {
		{{else if .Signed -}}
		if v, err := strconv.ParseInt(s, 10, {{.Bits}}); err != nil {
		{{else -}}
		if v, err := strconv.ParseUint(s, 10, {{.Bits}}); err != nil {
		{{end -}}
			return err
		} else {
			{{.ObjectID}}.{{.Name}} = {{.Type}}(v)
		}
	{{else if eq .Type "string" -}}
		{{.ObjectID}}.{{.Name}} = s
	{{else if eq .Type "[]byte" -}}
		if v, err := base64.StdEncoding.DecodeString(s); err != nil {
			return err
		} else {
			{{.ObjectID}}.{{.Name}} = v
		}
	{{else if eq .Type "bool" -}}
		s = strings.ToLower(s)
		var v bool
		if s == "no" || s == "n" {
			v = false
		} else if s == "yes" || s == "y" {
			v = true
		} else if b, err := strconv.ParseBool(s); err != nil {
			return err
		} else {
			v = b
		}
		{{.ObjectID}}.{{.Name}} = v
	{{else if eq .Type "time.Duration" -}}
		if v, err := time.ParseDuration(s); err != nil {
			return err
		} else {
			{{.ObjectID}}.{{.Name}} = v
		}
	{{else if eq .Type "netip.Addr" -}}
		if v, err := core.ParseHostAddr(s); err != nil {
			return err
		} else {
			{{.ObjectID}}.{{.Name}} = v
		}
	{{end -}}
	exists["{{.Name}}"] = true
{{end -}}

{{range $type, $fields := .}}

import (
{{if $fields | hasType "[]byte" -}}
	"encoding/base64"
{{end -}}
{{if $fields | hasType "netip.Addr" -}}
	"net/netip"
{{end -}}
{{if $fields | hasType "bool" -}}
	"strconv"
{{end -}}
{{if $fields | hasType "time.Duration" -}}
	"time"
{{end -}}
	"bufio"
	"errors"
	"flag"
	"os"
	"strings"
	"graphql-project/core"
)

var (
{{range $fields -}}
	{{.VarName}} string
{{end -}}
)

func init() {
{{range $fields -}}
	flag.StringVar(&{{.VarName}}, "{{.CommandLine}}", "{{.Default}}", "{{.Description}}")
{{end -}}
	flag.Parse()
}

{{$objectID := $type | toLowerCamel}}

{{range $fields}}
	{{if not .Exported -}}
		func ({{$objectID}} *{{$type}}) {{.MethodName}}() {{.Type}} {
			return {{$objectID}}.{{.Name}}
		}
	{{end -}}
{{end}}

func loadDotEnvFile(fileName string) (map[string]string, error) {
	if file, err := os.OpenFile(fileName, os.O_RDONLY, 0); err != nil {
		return nil, err
	} else {
		defer file.Close()

		stringBuffer := make([]string, 0, 128)
		scanner := bufio.NewScanner(file)
		for scanner.Scan() {
			stringBuffer = append(stringBuffer, scanner.Text())
		}
		if err := scanner.Err(); err != nil {
			return nil, err
		}

		values := make(map[string]string)
		for _, str := range stringBuffer {
			if core.StartWith(str, '#') {
				continue
			}
			if i := strings.IndexByte(str, '='); i > 0 {
				param := strings.TrimSpace(str[:i])
				if param != "" {
					value := str[i+1:]
					if i := strings.IndexByte(value, '#'); i >= 0 {
						value = value[:i]
					}
					value = core.TrimQuotes(strings.TrimSpace(value))
					if value != "" {
						values[param] = value
					}
				}
			}
		}

		return values, nil
	}
}

func ({{$objectID}} *{{$type}}) loadEnv(exists map[string]bool) error {
{{range $fields -}}
	if s, ok := os.LookupEnv("{{.Environment}}"); !ok || s == "" {
		return nil
	} else {
		{{template "valueHandler" params . $objectID -}}
	}
{{end -}}
	return nil
}

func ({{$objectID}} *{{$type}}) loadDotEnv(exists map[string]bool) error {
	if values, err := loadDotEnvFile(".env"); err != nil {
		if err == os.ErrNotExist {
			return nil
		}
		return err
	} else {
{{range $fields -}}
		if s, ok := values["{{.Environment}}"]; ok {
			if s == "" {
				return errors.New("empty configuration parameter: {{.Name}}")
			} else {
				{{template "valueHandler" params . $objectID -}}
			}
		}
{{end -}}
	}
	return nil
}

func ({{$objectID}} *{{$type}}) loadFlags(exists map[string]bool) error {
	var s string
{{range $fields -}}
	s = {{.VarName}}
	if s != "" {
		{{template "valueHandler" params . $objectID -}}
	}
{{end -}}
	return nil
}

func ({{$objectID}} *{{$type}}) Load() error {
	exists := make(map[string]bool)
	if err := {{$objectID}}.loadEnv(exists); err != nil {
		return err
	}
	if err := config.loadDotEnv(exists); err != nil {
		if !errors.Is(err, os.ErrNotExist) {
			return err
		}
	}
	if err := {{$objectID}}.loadFlags(exists); err != nil {
		return err
	}
{{range $fields -}}
	{{if eq .Default "" -}}
		if v, ok := exists["{{.Name}}"]; !ok || !v {
			return errors.New("no configuration parameter: {{.Name}}")
		}
	{{end -}}
{{end -}}
	return nil
}
{{end}}
