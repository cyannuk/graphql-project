// Code generated by gen; DO NOT EDIT.
package config

{{range $type, $fields := .}}

type flagOptions struct {
{{range $fields -}}
	{{.FlagVar}} {{.FlagType}}
{{end -}}
}

type errHelp string

func (err errHelp) Unwrap() error {
	return flag.ErrHelp
}

func (err errHelp) Error() string {
	return string(err)
}

type Options interface {
	Get(name string) core.Any
}

type environment struct{}

type dotEnv map[string]string

type allOptions []Options

func (e environment) Get(name string) core.Any {
	if s, ok := os.LookupEnv(name); !ok {
		return core.Any{}
	} else {
		return core.NewAny(s)
	}
}

func EnvOptions() Options {
	return environment{}
}

func loadLines(fileName string) (lines []string, err error) {
	lines = make([]string, 0, 128)
	var file *os.File
	file, err = os.OpenFile(fileName, os.O_RDONLY, 0)
	if err != nil {
		return
	}
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}
	err = scanner.Err()
	file.Close()
	return
}

func DotEnvOptions(files []string) (Options, error) {
	var values dotEnv = make(map[string]string)
	for _, fileName := range files {
		lines, err := loadLines(fileName)
		if err != nil {
			return nil, err
		}
		for _, str := range lines {
			if core.StartWith(str, '#') {
				continue
			}
			if i := strings.IndexByte(str, '='); i > 0 {
				param := strings.TrimSpace(str[:i])
				if param != "" {
					value := str[i+1:]
					if i := strings.IndexByte(value, '#'); i >= 0 {
						value = value[:i]
					}
					value = core.TrimQuotes(strings.TrimSpace(value))
					if value != "" {
						values[param] = value
					}
				}
			}
		}
	}
	return values, nil
}

func (d dotEnv) Get(name string) core.Any {
	if s, ok := d[name]; !ok {
		return core.Any{}
	} else {
		return core.NewAny(s)
	}
}

func (flagOpts flagOptions) Get(name string) core.Any {
	switch name {
{{range $fields -}}
	case "{{.Environment}}":
		return core.NewAny(flagOpts.{{.FlagVar}})
{{end -}}
	default:
		panic(fmt.Sprintf("unknown flag `%s`", name))
	}
}

func (options allOptions) Get(name string) core.Any {
	for _, o := range options {
		if o != nil {
			if v := o.Get(name); !v.IsEmpty() {
				return v
			}
		}
	}
	return core.Any{}
}

func FlagOptions(args []string) (Options, error) {
	flags := flag.NewFlagSet(args[0], flag.ContinueOnError)
	var buffer bytes.Buffer
	flags.SetOutput(&buffer)

	var options flagOptions
{{range $fields -}}
	flags.{{.FlagParser}}(&options.{{.FlagVar}}, "{{.Flag}}", {{.Default}}, "{{.Description}}")
{{end -}}
	err := flags.Parse(args[1:])
	if err != nil {
		if err == flag.ErrHelp {
			return nil, errHelp(buffer.String())
		}
		return nil, err
	}
	return options, nil
}

func newOptions(cfgOpts cfgOptions) (options Options, err error) {
	var flagOptions Options
	if cfgOpts.useFlags {
		flagOptions, err = FlagOptions(os.Args)
		if err != nil {
			return
		}
	}
	dotEnvOptions, err := DotEnvOptions(cfgOpts.files)
	if err != nil {
		if !errors.Is(err, os.ErrNotExist) {
			return
		}
	}
	var allOpts allOptions = []Options{EnvOptions(), dotEnvOptions, flagOptions}
	options = allOpts
	return
}

{{$objectID := $type | toLowerCamel}}

{{range $fields}}
	{{if not .Exported -}}
	func ({{$objectID}} *{{$type}}) {{.MethodName}}() {{.Type}} {
		return {{$objectID}}.{{.Name}}
	}
	{{end -}}
{{end}}

type cfgOptions struct {
	files    []string
	useFlags bool
}

func DisableFlags() func(*cfgOptions) {
	return func(cfgOpts *cfgOptions) {
		cfgOpts.useFlags = false
	}
}

func Files(files ...string) func(*cfgOptions) {
	return func(cfgOpts *cfgOptions) {
		cfgOpts.files = files
	}
}

func ({{$objectID}} *{{$type}}) Load(opts ...func(*cfgOptions)) (err error) {
	cfgOpts := cfgOptions{useFlags: true, files: []string{".env"}}
	for _, opt := range opts {
		opt(&cfgOpts)
	}
	options, err := newOptions(cfgOpts)
	if err != nil {
		if !errors.Is(err, os.ErrNotExist) {
			return
		}
	}
	var option core.Any
{{range $fields -}}
	option = options.Get("{{.Environment}}")
	{{if not .Optional -}}
	if option.IsEmpty() {{if not .HasDefault}} || option.IsDefault() {{end}} {
		err = errors.New("{{.Name}}: no value")
		return
	}
	{{end -}}
	{{$objectID}}.{{.Name}}, err = option.{{.Accessor}}()
	if err != nil {
		err = fmt.Errorf("{{.Name}}: %w", err)
		return
	}
{{end -}}
	return
}

{{end}}
