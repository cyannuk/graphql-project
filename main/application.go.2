package main

import (
	"errors"
	"io"

	"github.com/99designs/gqlgen/graphql/executor"
	"github.com/goccy/go-json"
	"github.com/gofiber/fiber/v2"

	"graphql-pro/domain/repository"
	"graphql-pro/gql"
)

type Application struct {
	app *fiber.App
}

func (application *Application) Shutdown() error {
	if application.app != nil {
		if err := application.app.Shutdown(); err != nil {
			return err
		}
		application.app = nil
	}
	return nil
}

func onShutdown(resources ...io.Closer) fiber.OnShutdownHandler {
	return func() error {
		var errs error
		for _, resource := range resources {
			if err := resource.Close(); err != nil {
				errs = errors.Join(errs, err)
			}
		}
		return errs
	}
}

func Default(_ *fiber.Ctx) error {
	return nil
}

func (application *Application) Start(bindAddr string) error {
	return application.app.Listen(bindAddr)
}

func NewApplication(connectionString string) (Application, error) {
	dataSource, err := repository.NewDataSource(connectionString)
	if err != nil {
		return Application{}, err
	}

	gqlExecutor := executor.New(gql.NewExecutableSchema(gql.Config{Resolvers: &gql.Resolver{UsersRepo: repository.NewUserRepository(dataSource)}}))

	config := fiber.Config{JSONEncoder: json.Marshal, JSONDecoder: json.Unmarshal, DisableKeepalive: true, DisableStartupMessage: true, DisableDefaultDate: true, DisableDefaultContentType: true}
	application := Application{fiber.New(config)}

	application.app.Get("/", Default)
	application.app.Use("/graphql", gql.GraphQL(gqlExecutor))
	application.app.Hooks().OnShutdown(onShutdown(dataSource))

	return application, nil
}
