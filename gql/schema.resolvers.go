package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"graphql-project/core"
	"graphql-project/domain/model"

	fiber "github.com/gofiber/fiber/v2"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (string, error) {
	return r.Resolver.Login(ctx, email, password)
}

// NewOrder is the resolver for the newOrder field.
func (r *mutationResolver) NewOrder(ctx context.Context, order model.Order) (*model.Order, error) {
	return r.orderRepository.CreateOrder(ctx, &order)
}

// NewProduct is the resolver for the newProduct field.
func (r *mutationResolver) NewProduct(ctx context.Context, product model.Product) (*model.Product, error) {
	return r.productRepository.CreateProduct(ctx, &product)
}

// NewReview is the resolver for the newReview field.
func (r *mutationResolver) NewReview(ctx context.Context, review model.Review) (*model.Review, error) {
	return r.reviewRepository.CreateReview(ctx, &review)
}

// NewUser is the resolver for the newUser field.
func (r *mutationResolver) NewUser(ctx context.Context, user model.User) (*model.User, error) {
	return r.userRepository.CreateUser(ctx, &user)
}

// Order is the resolver for the order field.
func (r *mutationResolver) Order(ctx context.Context, id int64, order model.OrderInput) (*model.Order, error) {
	return r.orderRepository.UpdateOrder(ctx, id, &order)
}

// Review is the resolver for the review field.
func (r *mutationResolver) Review(ctx context.Context, id int64, review model.ReviewInput) (*model.Review, error) {
	return r.reviewRepository.UpdateReview(ctx, id, &review)
}

// Product is the resolver for the product field.
func (r *mutationResolver) Product(ctx context.Context, id int64, product model.ProductInput) (*model.Product, error) {
	return r.productRepository.UpdateProduct(ctx, id, &product)
}

// User is the resolver for the user field.
func (r *mutationResolver) User(ctx context.Context, id int64, user model.UserInput) (*model.User, error) {
	id, ok := core.CheckUserId(ctx, id)
	if !ok {
		return nil, fiber.ErrForbidden
	}
	return r.userRepository.UpdateUser(ctx, id, &user)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int64) (*model.User, error) {
	id, ok := core.CheckUserId(ctx, id)
	if !ok {
		return nil, fiber.ErrForbidden
	}
	return r.userRepository.GetUserByID(ctx, id)
}

// UserByEmail is the resolver for the userByEmail field.
func (r *queryResolver) UserByEmail(ctx context.Context, email string) (*model.User, error) {
	email, ok := core.CheckUserEmail(ctx, email)
	if !ok {
		return nil, fiber.ErrForbidden
	}
	return r.userRepository.GetUserByEmail(ctx, email)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, offset int32, limit int32) ([]model.User, error) {
	userId, role := core.GetContextUser(ctx)
	if role == model.RoleAdmin {
		return r.userRepository.GetUsers(ctx, offset, limit)
	} else {
		if user, err := r.userRepository.GetUserByID(ctx, userId); err != nil {
			return nil, err
		} else {
			return []model.User{*user}, nil
		}
	}
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id int64) (*model.Order, error) {
	if order, err := r.orderRepository.GetOrderByID(ctx, id); err != nil {
		return nil, err
	} else {
		userId, role := core.GetContextUser(ctx)
		if role == model.RoleAdmin || order.UserId == userId {
			return order, nil
		} else {
			return nil, nil
		}
	}
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context, offset int32, limit int32) ([]model.Order, error) {
	userId, role := core.GetContextUser(ctx)
	if role == model.RoleAdmin {
		return r.orderRepository.GetOrders(ctx, offset, limit)
	} else {
		return r.orderRepository.GetUserOrders(ctx, userId, offset, limit)
	}
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id int64) (*model.Product, error) {
	return r.productRepository.GetProductByID(ctx, id)
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, offset int32, limit int32) ([]model.Product, error) {
	return r.productRepository.GetProducts(ctx, offset, limit)
}

// Review is the resolver for the review field.
func (r *queryResolver) Review(ctx context.Context, id int64) (*model.Review, error) {
	return r.reviewRepository.GetReviewByID(ctx, id)
}

// Reviews is the resolver for the reviews field.
func (r *queryResolver) Reviews(ctx context.Context, offset int32, limit int32) ([]model.Review, error) {
	return r.reviewRepository.GetReviews(ctx, offset, limit)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
