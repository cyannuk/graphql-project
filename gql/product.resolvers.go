package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"graphql-project/domain/model"
	"graphql-project/domain/repository"
	"graphql-project/gql/dataloader"
	"graphql-project/tracing"
)

// Orders is the resolver for the orders field.
func (r *productResolver) Orders(ctx context.Context, obj *model.Product, offset int32, limit int32) ([]model.Order, error) {
	ctx, span := tracing.InitSpan(ctx, "/query/Product.Orders")
	defer span.End()
	loaders := dataloader.FromContext(ctx)
	if orders, err := loaders.ProductOrdersLoader.Load(repository.With(ctx, offset, limit), obj.ID); err != nil {
		return nil, err
	} else {
		return orders, nil
	}
}

// Reviews is the resolver for the reviews field.
func (r *productResolver) Reviews(ctx context.Context, obj *model.Product, offset int32, limit int32) ([]model.Review, error) {
	ctx, span := tracing.InitSpan(ctx, "/query/Product.Reviews")
	defer span.End()
	return r.reviewRepository.GetProductReviews(ctx, obj.ID, offset, limit)
}

// Product returns ProductResolver implementation.
func (r *Resolver) Product() ProductResolver { return &productResolver{r} }

type productResolver struct{ *Resolver }
