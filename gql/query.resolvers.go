package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"graphql-pro/core"
	"graphql-pro/domain/model"
)

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int64) (*model.User, error) {
	id, err := core.CheckUserId(ctx, id)
	if err != nil {
		return nil, err
	}
	return r.userRepository.GetUserByID(ctx, id)
}

// UserByEmail is the resolver for the userByEmail field.
func (r *queryResolver) UserByEmail(ctx context.Context, email string) (*model.User, error) {
	email, err := core.CheckUserEmail(ctx, email)
	if err != nil {
		return nil, err
	}
	return r.userRepository.GetUserByEmail(ctx, email)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, offset int32, limit int32) ([]model.User, error) {
	userSession := core.GetUserSession(ctx)
	if userSession.Admin {
		return r.userRepository.GetUsers(ctx, offset, limit)
	} else {
		if user, err := r.userRepository.GetUserByID(ctx, userSession.UserId); err != nil {
			return nil, err
		} else {
			return []model.User{*user}, nil
		}
	}
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id int64) (*model.Order, error) {
	if order, err := r.orderRepository.GetOrderByID(ctx, id); err != nil {
		return nil, err
	} else {
		userSession := core.GetUserSession(ctx)
		if userSession.Admin || order.UserId == userSession.UserId {
			return order, nil
		} else {
			return nil, nil
		}
	}
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context, offset int32, limit int32) ([]model.Order, error) {
	userSession := core.GetUserSession(ctx)
	if userSession.Admin {
		return r.orderRepository.GetOrders(ctx, offset, limit)
	} else {
		return r.orderRepository.GetUserOrders(ctx, userSession.UserId, offset, limit)
	}
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
