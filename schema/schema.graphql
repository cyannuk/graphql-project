directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

type Query {
    user(id: ID! = 0): User @hasRole(roles: [USER, ADMIN])
    userByEmail(email: String! = ""): User @hasRole(roles: [USER, ADMIN])
    users(offset: Int! = 0, limit: Int! = 100): [User!] @hasRole(roles: [USER, ADMIN])
    order(id: ID!): Order @hasRole(roles: [USER, ADMIN])
    orders(offset: Int! = 0, limit: Int! = 100): [Order!] @hasRole(roles: [USER, ADMIN])
    product(id: ID!): Product @hasRole(roles: [USER, ADMIN])
    products(offset: Int! = 0, limit: Int! = 100): [Product!] @hasRole(roles: [USER, ADMIN])
    review(id: ID!): Review @hasRole(roles: [USER, ADMIN])
    reviews(offset: Int! = 0, limit: Int! = 100): [Review!] @hasRole(roles: [USER, ADMIN])
}

type Mutation {
    login(email: String!, password: String!): String! @hasRole(roles: [ANON])
    newOrder(order: NewOrder!): Order @hasRole(roles: [ADMIN])
    newProduct(product: NewProduct!): Product @hasRole(roles: [ADMIN])
    newReview(review: NewReview!): Review @hasRole(roles: [USER])
    newUser(user: NewUserInput!): User @hasRole(roles: [ANON, ADMIN])
    order(id: ID!, order: OrderInput!): Order @hasRole(roles: [ADMIN])
    review(id: ID!, review: ReviewInput!): Review @hasRole(roles: [USER])
    product(id: ID!, product: ProductInput!): Product @hasRole(roles: [ADMIN])
    user(id: ID!, user: UserInput!): User @hasRole(roles: [USER, ADMIN])
}
